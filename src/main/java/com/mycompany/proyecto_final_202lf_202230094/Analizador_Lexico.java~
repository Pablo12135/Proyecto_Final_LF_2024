// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: Lexico.flex

package com.mycompany.proyecto_final_202lf_202230094;

//Seccion de imports
import java.util.ArrayList;
import java.util.List;
import Reportes.ErrorLexico;
import Clases_Utilizar.Token;


@SuppressWarnings("fallthrough")
public class Analizador_Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\6\0"+
    "\1\4\2\5\2\6\1\7\1\10\1\11\1\6\1\12"+
    "\1\13\1\14\1\15\6\16\1\0\1\7\1\17\1\20"+
    "\1\17\2\0\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\0\1\7\2\0\1\53"+
    "\1\0\32\52\1\0\1\54\10\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\2\5\1\6"+
    "\1\7\26\10\1\0\1\11\1\0\1\12\1\0\1\7"+
    "\3\10\1\13\1\10\1\0\2\10\1\13\23\10\1\14"+
    "\14\10\1\0\1\15\1\10\1\14\1\16\43\10\1\0"+
    "\11\10\1\17\12\10\1\20\3\10\1\0\14\10\1\0"+
    "\6\10\1\0\2\10\1\0\1\10\3\0\1\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\55\0\207\0\55\0\55\0\264"+
    "\0\341\0\u010e\0\u013b\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c"+
    "\0\u0249\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384"+
    "\0\u03b1\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec"+
    "\0\u0519\0\u0519\0\u0546\0\u0573\0\u05a0\0\55\0\u05cd\0\u05fa"+
    "\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0276\0\u0735"+
    "\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d"+
    "\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05"+
    "\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d"+
    "\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5"+
    "\0\u05a0\0\u0d02\0\u0276\0\u0276\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6"+
    "\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0654\0\u0ef1"+
    "\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059"+
    "\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1"+
    "\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc\0\u1329"+
    "\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491"+
    "\0\u14be\0\u0276\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc"+
    "\0\u15f9\0\u1626\0\u1653\0\u1680\0\u0276\0\u16ad\0\u16da\0\u1707"+
    "\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842\0\u186f"+
    "\0\u189c\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u197d\0\u19aa\0\u19d7"+
    "\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12\0\u1b3f"+
    "\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\u0519";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\6\1\10"+
    "\1\6\5\11\1\12\1\7\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\22\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\3\22\2\2\56\0\2\3\52\0"+
    "\2\41\2\0\1\42\6\41\2\43\40\41\10\0\1\44"+
    "\55\0\1\45\5\11\56\0\1\46\46\0\5\22\2\0"+
    "\3\22\1\47\7\22\1\50\1\22\1\51\4\22\1\52"+
    "\2\22\1\53\4\22\1\54\13\0\5\22\2\0\10\22"+
    "\1\55\5\22\1\56\11\22\1\57\1\22\1\54\13\0"+
    "\5\22\2\0\1\60\15\22\1\61\2\22\1\62\10\22"+
    "\1\54\13\0\5\22\2\0\1\63\3\22\1\64\14\22"+
    "\1\65\10\22\1\54\13\0\5\22\2\0\27\22\1\66"+
    "\2\22\1\54\13\0\5\22\2\0\1\67\15\22\1\70"+
    "\2\22\1\71\10\22\1\54\13\0\5\22\2\0\21\22"+
    "\1\72\10\22\1\54\13\0\5\22\2\0\32\22\1\54"+
    "\13\0\5\22\2\0\5\22\1\57\7\22\1\73\14\22"+
    "\1\54\13\0\5\22\2\0\16\22\1\74\13\22\1\54"+
    "\13\0\5\22\2\0\4\22\1\75\25\22\1\54\13\0"+
    "\5\22\2\0\10\22\1\76\21\22\1\54\13\0\5\22"+
    "\2\0\1\77\7\22\1\100\21\22\1\54\13\0\5\22"+
    "\2\0\16\22\1\101\5\22\1\102\5\22\1\54\13\0"+
    "\5\22\2\0\15\22\1\57\3\22\1\103\10\22\1\54"+
    "\13\0\5\22\2\0\21\22\1\104\10\22\1\54\13\0"+
    "\5\22\2\0\4\22\1\105\25\22\1\54\13\0\5\22"+
    "\2\0\4\22\1\106\17\22\1\107\5\22\1\54\13\0"+
    "\5\22\2\0\1\110\3\22\1\111\14\22\1\112\6\22"+
    "\1\113\1\22\1\54\13\0\5\22\2\0\15\22\1\114"+
    "\1\22\1\115\12\22\1\54\13\0\5\22\2\0\1\116"+
    "\31\22\1\54\13\0\5\22\2\0\7\22\1\117\22\22"+
    "\1\54\1\0\2\41\2\0\1\42\52\41\2\0\1\42"+
    "\5\41\5\120\36\41\2\44\1\0\2\44\1\0\46\44"+
    "\13\0\5\121\50\0\5\22\2\0\3\22\1\57\26\22"+
    "\1\54\13\0\5\22\2\0\23\22\1\122\6\22\1\54"+
    "\13\0\5\22\2\0\3\22\1\123\26\22\1\54\13\0"+
    "\5\22\2\0\2\22\1\57\27\22\1\54\13\0\5\22"+
    "\2\0\6\22\1\124\23\22\1\54\22\0\32\22\14\0"+
    "\5\22\2\0\6\22\1\125\23\22\1\54\13\0\5\22"+
    "\2\0\16\22\1\126\13\22\1\54\13\0\5\22\2\0"+
    "\22\22\1\127\7\22\1\54\13\0\5\22\2\0\13\22"+
    "\1\130\1\22\1\131\6\22\1\132\5\22\1\54\13\0"+
    "\5\22\2\0\4\22\1\133\25\22\1\54\13\0\5\22"+
    "\2\0\23\22\1\134\6\22\1\54\13\0\5\22\2\0"+
    "\2\22\1\135\10\22\1\136\6\22\1\137\7\22\1\54"+
    "\13\0\5\22\2\0\16\22\1\140\13\22\1\54\13\0"+
    "\5\22\2\0\10\22\1\141\21\22\1\54\13\0\5\22"+
    "\2\0\13\22\1\142\16\22\1\54\13\0\5\22\2\0"+
    "\21\22\1\143\10\22\1\54\13\0\5\22\2\0\16\22"+
    "\1\144\13\22\1\54\13\0\5\22\2\0\16\22\1\145"+
    "\13\22\1\54\13\0\5\22\2\0\22\22\1\146\1\147"+
    "\6\22\1\54\13\0\5\22\2\0\10\22\1\150\21\22"+
    "\1\54\13\0\5\22\2\0\30\22\1\57\1\22\1\54"+
    "\13\0\5\22\2\0\14\22\1\151\15\22\1\54\13\0"+
    "\5\22\2\0\27\22\1\124\2\22\1\54\13\0\5\22"+
    "\2\0\15\22\1\124\14\22\1\54\13\0\5\22\2\0"+
    "\23\22\1\123\6\22\1\54\13\0\5\22\2\0\13\22"+
    "\1\152\1\153\15\22\1\54\13\0\5\22\2\0\3\22"+
    "\1\122\26\22\1\54\13\0\5\22\2\0\10\22\1\154"+
    "\21\22\1\54\13\0\5\22\2\0\5\22\1\155\24\22"+
    "\1\54\13\0\5\22\2\0\13\22\1\156\5\22\1\157"+
    "\1\22\1\57\6\22\1\54\13\0\5\22\2\0\14\22"+
    "\1\124\15\22\1\54\13\0\5\22\2\0\1\22\1\160"+
    "\30\22\1\54\13\0\5\22\2\0\27\22\1\161\2\22"+
    "\1\54\13\0\5\22\2\0\24\22\1\162\5\22\1\54"+
    "\13\0\5\22\2\0\17\22\1\163\12\22\1\54\13\0"+
    "\5\22\2\0\10\22\1\164\21\22\1\54\13\0\5\22"+
    "\2\0\3\22\1\133\26\22\1\54\13\0\5\22\2\0"+
    "\13\22\1\165\5\22\1\166\10\22\1\54\13\0\5\22"+
    "\2\0\4\22\1\167\25\22\1\54\1\0\2\41\2\0"+
    "\1\42\5\41\5\170\36\41\12\0\5\22\2\0\4\22"+
    "\1\171\25\22\1\54\13\0\5\22\2\0\10\22\1\172"+
    "\21\22\1\54\13\0\5\22\2\0\13\22\1\173\16\22"+
    "\1\54\13\0\5\22\2\0\2\22\1\174\27\22\1\54"+
    "\13\0\5\22\2\0\24\22\1\175\5\22\1\54\13\0"+
    "\5\22\2\0\22\22\1\176\7\22\1\54\13\0\5\22"+
    "\2\0\15\22\1\177\14\22\1\54\13\0\5\22\2\0"+
    "\1\200\31\22\1\54\13\0\5\22\2\0\1\201\3\22"+
    "\1\202\25\22\1\54\13\0\5\22\2\0\10\22\1\203"+
    "\21\22\1\54\13\0\5\22\2\0\4\22\1\200\25\22"+
    "\1\54\13\0\5\22\2\0\17\22\1\57\12\22\1\54"+
    "\13\0\5\22\2\0\22\22\1\204\7\22\1\54\13\0"+
    "\5\22\2\0\22\22\1\162\7\22\1\54\13\0\5\22"+
    "\2\0\4\22\1\205\25\22\1\54\13\0\5\22\2\0"+
    "\14\22\1\57\15\22\1\54\13\0\5\22\2\0\24\22"+
    "\1\140\5\22\1\54\13\0\5\22\2\0\4\22\1\206"+
    "\25\22\1\54\13\0\5\22\2\0\4\22\1\207\11\22"+
    "\1\57\13\22\1\54\13\0\5\22\2\0\15\22\1\57"+
    "\14\22\1\54\13\0\5\22\2\0\10\22\1\204\21\22"+
    "\1\54\13\0\5\22\2\0\13\22\1\57\16\22\1\54"+
    "\13\0\5\22\2\0\4\22\1\210\25\22\1\54\13\0"+
    "\5\22\2\0\14\22\1\211\15\22\1\54\13\0\5\22"+
    "\2\0\4\22\1\212\25\22\1\54\13\0\5\22\2\0"+
    "\4\22\1\213\25\22\1\54\13\0\5\22\2\0\10\22"+
    "\1\214\21\22\1\54\13\0\5\22\2\0\13\22\1\163"+
    "\16\22\1\54\13\0\5\22\2\0\23\22\1\202\6\22"+
    "\1\54\13\0\5\22\2\0\4\22\1\215\25\22\1\54"+
    "\13\0\5\22\2\0\4\22\1\57\25\22\1\54\13\0"+
    "\5\22\2\0\20\22\1\216\11\22\1\54\13\0\5\22"+
    "\2\0\24\22\1\217\5\22\1\54\13\0\5\22\2\0"+
    "\2\22\1\220\27\22\1\54\13\0\5\22\2\0\21\22"+
    "\1\163\10\22\1\54\1\0\2\41\2\0\1\42\5\41"+
    "\5\221\36\41\12\0\5\22\2\0\21\22\1\57\10\22"+
    "\1\54\13\0\5\22\2\0\15\22\1\161\14\22\1\54"+
    "\13\0\5\22\2\0\4\22\1\222\25\22\1\54\13\0"+
    "\5\22\2\0\1\223\31\22\1\54\13\0\5\22\2\0"+
    "\14\22\1\150\15\22\1\54\13\0\5\22\2\0\23\22"+
    "\1\224\6\22\1\54\13\0\5\22\2\0\23\22\1\124"+
    "\6\22\1\54\13\0\5\22\2\0\23\22\1\163\6\22"+
    "\1\54\13\0\5\22\2\0\1\22\1\225\30\22\1\54"+
    "\13\0\5\22\2\0\14\22\1\214\15\22\1\54\13\0"+
    "\5\22\2\0\23\22\1\57\6\22\1\54\13\0\5\22"+
    "\2\0\10\22\1\226\21\22\1\54\13\0\5\22\2\0"+
    "\21\22\1\204\10\22\1\54\13\0\5\22\2\0\6\22"+
    "\1\227\23\22\1\54\13\0\5\22\2\0\21\22\1\230"+
    "\10\22\1\54\13\0\5\22\2\0\1\231\31\22\1\54"+
    "\13\0\5\22\2\0\21\22\1\232\10\22\1\54\13\0"+
    "\5\22\2\0\2\22\1\204\27\22\1\54\13\0\5\22"+
    "\2\0\1\233\31\22\1\54\13\0\5\22\2\0\24\22"+
    "\1\163\5\22\1\54\13\0\5\22\2\0\4\22\1\234"+
    "\25\22\1\54\13\0\5\22\2\0\7\22\1\235\22\22"+
    "\1\54\1\0\2\41\2\0\1\42\3\41\1\236\44\41"+
    "\12\0\5\22\2\0\1\237\31\22\1\54\13\0\5\22"+
    "\2\0\3\22\1\163\26\22\1\54\13\0\5\22\2\0"+
    "\21\22\1\240\10\22\1\54\13\0\5\22\2\0\1\241"+
    "\31\22\1\54\13\0\5\22\2\0\6\22\1\150\23\22"+
    "\1\54\13\0\5\22\2\0\4\22\1\242\25\22\1\54"+
    "\13\0\5\22\2\0\10\22\1\243\21\22\1\54\13\0"+
    "\5\22\2\0\21\22\1\75\10\22\1\54\13\0\5\22"+
    "\2\0\4\22\1\244\25\22\1\54\13\0\5\22\2\0"+
    "\13\22\1\202\16\22\1\54\13\0\5\22\2\0\22\22"+
    "\1\57\7\22\1\54\13\0\5\22\2\0\1\242\31\22"+
    "\1\54\1\0\2\41\2\0\1\42\5\41\2\245\41\41"+
    "\12\0\5\22\2\0\15\22\1\202\14\22\1\54\13\0"+
    "\5\22\2\0\1\246\31\22\1\54\13\0\5\22\2\0"+
    "\22\22\1\163\7\22\1\54\13\0\5\22\2\0\21\22"+
    "\1\202\10\22\1\54\13\0\5\22\2\0\2\22\1\202"+
    "\27\22\1\54\13\0\5\22\2\0\15\22\1\247\14\22"+
    "\1\54\1\0\2\41\2\0\1\42\5\41\5\250\36\41"+
    "\12\0\5\22\2\0\10\22\1\251\21\22\1\54\13\0"+
    "\5\22\2\0\2\22\1\217\27\22\1\54\1\0\2\41"+
    "\2\0\1\42\3\41\1\252\44\41\12\0\5\22\2\0"+
    "\15\22\1\204\14\22\1\54\1\0\2\41\2\0\1\42"+
    "\5\41\4\253\41\41\2\0\1\42\5\41\5\254\40\41"+
    "\2\0\1\255\50\41";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7200];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\2\11\31\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\11\5\1\1\0\43\1"+
    "\1\0\47\1\1\0\30\1\1\0\14\1\1\0\6\1"+
    "\1\0\2\1\1\0\1\1\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */

// Codigo Java

    private List<String> lista = new ArrayList<>();
    // Lista para almacenar los tokens como objetos
    private List<Token> listaTokens = new ArrayList<>();
    private List<ErrorLexico> listaErrores = new ArrayList<>();

    public void addList(String token) {
        lista.add(token);
    }

    // Método para agregar errores léxicos a la lista de errores
    public void addListaErrores(ErrorLexico error) {
        listaErrores.add(error);  // Agregar el objeto ErrorLexico a la lista
    }

// Método para agregar tokens a la lista de objetos Token
    public void addToken(String tokenText) {
        Token token = new Token(tokenText, yyline, yycolumn);  // Crear un objeto Token con el texto, línea y columna
        listaTokens.add(token);  // Agregar el objeto Token a la lista
    }

    public List<String> getLista(){
        return lista;
    }
    
    // Método para obtener la lista de tokens
    public List<Token> getListaTokens(){
        return listaTokens;
    }

    public List<ErrorLexico> getListaErrores() {
        return listaErrores;  // Devolver la lista de objetos ErrorLexico
    }





  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { // Capturar el token que causó el error
    String tokenNoReconocido = yytext();
    
    // Crear el mensaje de error personalizado
    String mensajeError = "";
    
    // Condición para operadores relacionales
    if (tokenNoReconocido.equals("<") || tokenNoReconocido.equals(">") || tokenNoReconocido.equals("<=") || tokenNoReconocido.equals(">=")) {
        mensajeError = "operador no reconocido";
    }
    // Condición para símbolos
    else if (tokenNoReconocido.equals("(") || tokenNoReconocido.equals(")") || tokenNoReconocido.equals(",") || tokenNoReconocido.equals(";") || tokenNoReconocido.equals(".")) {
        mensajeError = "Simbolo no reconocido";
    }
    // Condición para otros caracteres no reconocidos
    else {
        mensajeError = "Caracter no reconocido";
    }

    // Crear el objeto ErrorLexico con la información
    ErrorLexico error = new ErrorLexico(tokenNoReconocido, yyline, yycolumn, mensajeError);

    // Mostrar el mensaje de error en la consola
    System.out.println("Token: '" + tokenNoReconocido + "' Línea: " + yyline + " Columna: " + yycolumn + " Descripción: " + mensajeError);

    // Agregar el error a la lista de errores
    addListaErrores(error);
            }
          // fall through
          case 18: break;
          case 2:
            { /* Ignorar espacios */
            }
          // fall through
          case 19: break;
          case 3:
            { System.out.print(yytext());
            }
          // fall through
          case 20: break;
          case 4:
            { System.out.println("SIMBOLO: " + yytext());
    addList(yytext());
    Token token = new Token(yytext(), yyline, yycolumn);
            }
          // fall through
          case 21: break;
          case 5:
            { System.out.println("OPERADOR ARITMETICO: " + yytext());
    addList(yytext());
    Token token = new Token(yytext(), yyline, yycolumn);
            }
          // fall through
          case 22: break;
          case 6:
            { System.out.println("ENTERO: " + yytext());
    addList(yytext());
    Token token = new Token(yytext(), yyline, yycolumn);
            }
          // fall through
          case 23: break;
          case 7:
            { System.out.println("OPERADOR RELACIONAL: " + yytext());
    addList(yytext());
    Token token = new Token(yytext(), yyline, yycolumn);
            }
          // fall through
          case 24: break;
          case 8:
            { String id = yytext();
    // Validar el identificador para asegurarse de que cumple con snake_case
    if (id.matches("^[a-z][a-z0-9_]*$")) {
        System.out.println("IDENTIFICADOR: " + id);
        addList(id);
        Token token = new Token(id, yyline, yycolumn);
    } else {
        // Si no cumple con la nomenclatura snake_case, agregar un error
        String mensajeError = "Identificador no válido. Debe seguir la nomenclatura snake_case (solo letras minúsculas, guiones bajos y números)";
        ErrorLexico error = new ErrorLexico(id, yyline, yycolumn, mensajeError);
        System.out.println("Token: '" + id + "' Línea: " + yyline + " Columna: " + yycolumn + " Descripción: " + mensajeError);
        addListaErrores(error);
    }
            }
          // fall through
          case 25: break;
          case 9:
            { System.out.println("CADENA: " + yytext());
    addList(yytext());
    Token token = new Token(yytext(), yyline, yycolumn);
            }
          // fall through
          case 26: break;
          case 10:
            { System.out.println("COMENTARIO: " + yytext());
    addList(yytext());
    Token token = new Token(yytext(), yyline, yycolumn);
            }
          // fall through
          case 27: break;
          case 11:
            { System.out.println("PALABRA CLAVE: " + yytext());
    addList(yytext());
    Token token = new Token(yytext(), yyline, yycolumn);
            }
          // fall through
          case 28: break;
          case 12:
            { System.out.println("OPERADOR LOGICO: " + yytext());
    addList(yytext());
    Token token = new Token(yytext(), yyline, yycolumn);
            }
          // fall through
          case 29: break;
          case 13:
            { System.out.println("DECIMAL: " + yytext());
    addList(yytext());
    Token token = new Token(yytext(), yyline, yycolumn);
            }
          // fall through
          case 30: break;
          case 14:
            { System.out.println("FUNCION DE AGREGACION: " + yytext());
    addList(yytext());
    Token token = new Token(yytext(), yyline, yycolumn);
            }
          // fall through
          case 31: break;
          case 15:
            { System.out.println("TIPO DE DATO: " + yytext());
    addList(yytext());
    Token token = new Token(yytext(), yyline, yycolumn);
            }
          // fall through
          case 32: break;
          case 16:
            { System.out.println("BOOLEANO: " + yytext());
    addList(yytext());
    Token token = new Token(yytext(), yyline, yycolumn);
            }
          // fall through
          case 33: break;
          case 17:
            { System.out.println("FECHA: " + yytext());
    addList(yytext());
    Token token = new Token(yytext(), yyline, yycolumn);
            }
          // fall through
          case 34: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Analizador_Lexico [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Analizador_Lexico scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Analizador_Lexico(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
